/**
 * Reusable validation utilities for common data types
 * Used across different validation schemas in the application
 */

// Email validation
export const validateEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email) && email.length <= 100;
};

// Phone number validation (international format)
export const validatePhoneNumber = (phone: string): boolean => {
  if (!phone || phone === "") return true; // Optional field
  const phoneRegex = /^[\+]?[1-9][\d]{0,15}$/;
  return phoneRegex.test(phone);
};

// Member ID validation (supports auto-generated M001 format or custom IDs)
export const validateMemberID = (memberId: string): boolean => {
  const autoGeneratedPattern = /^M\d{3,}$/;
  const customPattern = /^[A-Za-z0-9-_]{1,20}$/;
  
  return autoGeneratedPattern.test(memberId) || customPattern.test(memberId);
};

// ISBN validation (basic format check)
export const validateISBN = (isbn: string): boolean => {
  const isbn10Regex = /^(?:\d{9}[\dX]|\d{10})$/;
  const isbn13Regex = /^(?:\d{13}|\d{3}-\d{10})$/;
  const cleanISBN = isbn.replace(/[-\s]/g, "");
  
  return isbn10Regex.test(cleanISBN) || isbn13Regex.test(cleanISBN);
};

// Postal code validation (flexible for international formats)
export const validatePostalCode = (postalCode: string, countryCode?: string): boolean => {
  if (!postalCode || postalCode === "") return true; // Optional field
  
  // Basic validation - alphanumeric with optional spaces and dashes
  const basicPattern = /^[A-Za-z0-9\s-]{3,20}$/;
  
  // Country-specific patterns (can be extended)
  const patterns: Record<string, RegExp> = {
    US: /^\d{5}(-\d{4})?$/,
    CA: /^[A-Za-z]\d[A-Za-z][ -]?\d[A-Za-z]\d$/,
    GB: /^[A-Za-z]{1,2}\d[A-Za-z\d]?\s?\d[A-Za-z]{2}$/,
    DE: /^\d{5}$/,
    FR: /^\d{5}$/,
  };
  
  if (countryCode && patterns[countryCode.toUpperCase()]) {
    return patterns[countryCode.toUpperCase()].test(postalCode);
  }
  
  return basicPattern.test(postalCode);
};

// Text length validation with HTML tag stripping
export const validateTextLength = (text: string, maxLength: number, minLength = 0): boolean => {
  if (!text && minLength === 0) return true;
  
  // Strip HTML tags for length calculation
  const strippedText = text.replace(/<[^>]*>/g, "");
  const length = strippedText.trim().length;
  
  return length >= minLength && length <= maxLength;
};

// Name validation (letters, spaces, hyphens, apostrophes)
export const validateName = (name: string): boolean => {
  if (!name) return false;
  
  const namePattern = /^[A-Za-z\s\-'\.]{1,50}$/;
  return namePattern.test(name.trim());
};

// URL validation
export const validateURL = (url: string): boolean => {
  if (!url || url === "") return true; // Optional field
  
  try {
    new URL(url);
    return true;
  } catch {
    return false;
  }
};

// Custom validation error messages
export const validationMessages = {
  email: "Please enter a valid email address",
  phone: "Please enter a valid phone number",
  memberID: "Member ID must contain only letters, numbers, hyphens, and underscores",
  isbn: "Please enter a valid ISBN",
  postalCode: "Please enter a valid postal code",
  name: "Name can only contain letters, spaces, hyphens, and apostrophes",
  url: "Please enter a valid URL",
  required: (field: string) => `${field} is required`,
  minLength: (field: string, length: number) => `${field} must be at least ${length} characters`,
  maxLength: (field: string, length: number) => `${field} must be less than ${length} characters`,
};